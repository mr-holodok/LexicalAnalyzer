//---------------------------------------------------------------------------

#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

__fastcall HashTable::HashTable()
{
	for(int i = 0; i < size; i++)
		hashArray[i] = NULL;
}

double HashTable::generateKey(std::string value)
{
	double key = value[0];
	for(int i = 1; i < value.length(); i++)
	{
		int letter = value[i];
		key = key * 37 + letter;
	}
	return key;
}

int HashTable::hashFunction(double key)
{
	return (int)(key - ((int)(key / size)) * size) ;
}

bool HashTable::find(std::string value)
{
	int index = hashFunction(generateKey(value));
	if (hashArray[index].getValue() == value) return true;
	else return false;
}

void HashTable::insert(std::string value)
{
	DataItem item = DataItem(generateKey(value), value);
	int index = hashFunction(item.getKey());
	hashArray[index] = item;
}