//---------------------------------------------------------------------------

#pragma hdrstop

#include "Lexem.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

/*__fastcall Lexem::Lexem(tLex type, std::string value, int line, int pos)
{
	this->lexType = type;
	this->value = value;
	this->line = line;
	this->pos = pos;
}*/

std::string Lexem::getLexType()
{
	switch(this->lexType) {
		case lexIdentif: return "Ідентифікатор";
		case lexKeyWord: return "Ключове слово";
		case lexComma: return "Кома";
		case lexDot: return "Крапка";
		case lexColons: return "Двокрапка";
		case lexDblColons: return "Подвійна двокрапка";
		case lexSemiColon: return "Крапка з комою";
		case lexLParenthesis: return "Ліва кругова дужка";
		case lexRParenthesis: return "Права кругова дужка";
		case lexLBracket: return "Ліва квадратна дужка";
		case lexRBracket: return "Права квадратна дужка";
		case lexLBrace: return "Ліва фігурна дужка";
		case lexRBrace: return "Права фігурна дужка";
		case lexQuotes: return "Подвійні лапки";
		case lexQuotation: return "Одинарні лапки";
		case lexTilde: return "Тільда";
		case lexQuestion: return "знак питання";
		case lexPlus: return "Знак плюс";
		case lexMinus: return "Знак мінус";
		case lexStar: return "Знак зірочка";
		case lexDiv: return "Знак ділення";
		case lexEquating: return "Знак дорівнює";
		case lexPlusEq: return "Додавання з присвоєнням";
		case lexMinusEq: return "Віднімання з присвоєнням";
		case lexMultEq: return "Множення з присвоєнням";
		case lexDivEq: return "Ділення з присвоєнням";
		case lexEqual: return "Знак рівності";
		case lexLess: return "Знак менше";
		case lexGreater: return "Знак більше";
		case lexExclam: return "Знак оклику";
		case lexLessOrEq: return "Менше або дорівнює";
		case lexGreaterOrEq: return "Більше або дорівнює";
		case lexNotEq: return "Не дорівнює";
		case lexLessEqGreater: return "Трьох рівневе порівняння";
		case lexIncrem: return "Інкремент";
		case lexDecrem: return "Декремент";
		case lexArrow: return "Стрілка";
		case lexAmpersand: return "Знак амперсанд";
		case lexAmpersandEq: return "Бітове І з присвоєнням";
		case lexMod: return "Остача від ділення";
		case lexModEq: return "Остача від ділення з присвоєнням";
		case lexLShift: return "Зсув вліво";
		case lexRShift: return "Зсув вправо";
		case lexLShiftEq: return "Зсув вліво з присвоєнням";
		case lexRShiftEq: return "Зсув вправо з присвоєнням";
		case lexXor: return "Виключаюче АБО";
		case lexXorEq: return "Виключаюче АБО з присвоєнням";
		case lexBitOr: return "Бітове АБО";
		case lexBitOrEq: return "Бітове АБО з присвоєнням";
		case lexAnd: return "Логічне І";
		case lexOr: return "Логічне АБО";
		case lexStringConst: return "Рядкова константа";
		case lexChar: return "Символ";
		case lexUChar: return "Символ UTF-8";
		case lexDecNum: return "Десяткове константне число";
		case lexOctNum: return "Вісімкове константне число";
		case lexBinNum: return "Бінарне константне число";
		case lexHexNum: return "Шістнадцяткове константне число";
		case lexNumWithDot: return "Десяткове константне дійсне число";
		case lexHexNumWithDot: return "Шістнадцяткове дійсне константне число";
		case lexError: return "Лексема з помилкою";
    }
}

std::string Lexem::getValue()
{
	return this->value;
}

unsigned int Lexem::getLine()
{
	return this->line;
}

unsigned int Lexem::getPosition()
{
	return this->pos;
}
