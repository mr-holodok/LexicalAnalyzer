//---------------------------------------------------------------------------
#pragma hdrstop

#include "Scanner.h"
#include "fstream.h"
#include <string>
#include <iterator>
//---------------------------------------------------------------------------
#pragma package(smart_init)

HashTable Scanner::hashTable = HashTable();

Scanner::Scanner()
{
	initHashTable();
	initAuto();
}

vector<Lexem> Scanner::scan(const AnsiString &path)
{
	//for opening file required char* instead of string

	ifstream file; //file that contains text of program
	file.open(path.c_str());

	vector<Lexem> lexList;

	tree = Tree();

	Errors.clear();

	char ch;              //character for reading of each symbol
	std::string val;      //string for lexems longer than 1 symbol
	bool passThrough = false;
	tLex type;

	do //loop to end of file. Reads every character
	{
		switch(currState)
		{
			case H : {
				ch = file.get();  //getting symbol
				val.clear();
				type = lexError;

				if (ch == ' ') {
					++pos;
					continue;
				}
				else if (ch ==  85 || ch == 76) {
					currState = UCharOrID;
				}
				else if (ch == 117) {
					currState = U8CharOrID;
				}
				else if ((ch >= 65 && ch <= 90) || ch == 95 || (ch >= 97 && ch <= 122)) {
					currState = KWorID;
				}
				else if (ch == ';') {
					currState = F;
					type = lexSemiColon;
				}
				else if (ch == '\t') {
					pos+=3;
					continue;
				}
				//else if (ch == '\r') continue;
				else if (ch == '\n') {
					++line;
					pos = 1;
					continue;
				}
				else if (ch == '(') {
					currState = F;
					type = lexLRoundBracket;
				}
				else if (ch == ')') {
					currState = F;
					type = lexRRoundBracket;
				}
				else if (ch == '[') {
					currState = F;
					type = lexLSquareBracket;
				}
				else if (ch == ']') {
					currState = F;
					type = lexRSquareBracket;
				}
				else if (ch == '{') {
					currState = F;
					type = lexLFigureBracket;
				}
				else if (ch == '}') {
					currState = F;
					type = lexRFigureBracket;
				}
				else if (ch == ',') {
					currState = F;                                                                                                
					type = lexComma;
				}
				else if (ch == '?') {
					currState = F;
					type = lexQuestion;
				}
				else if	(ch == '~') {
					currState = F;
					type = lexArithmOp;
				}
				else if (ch == '\'') {
					currState = Char;
				}
				else if (ch == '\"') {
					currState = String;
				}
				else if (ch == '0') {
					currState = NumStartsWithZero;
				}
				else if (ch >= 49 && ch <= 57) {
					currState = Num;
				}
				else if (ch == '.') {
					currState = Dot;
				}
				else if (ch == ':') {
					currState = Colon;
				}
				else if (ch == '+') {
					currState = Plus;
				}
				else if (ch == '-') {
					currState = Minus;
				}
				else if (ch == '!') {
					type = lexLogicOp;
					currState = Assign;
				}
				else if (ch == '*') {
					currState = Assign;
					type = lexStar;
				}
				else if (ch == '&') {
					currState = Amp;
				}
				else if (ch == '/') {
					currState = Div;
				}
				else if (ch == '%') {
					currState = Assign;
					type = lexArithmOp;
				}
				else if (ch == '<') {
					currState = Less;
				}
				else if (ch == '>') {
					currState = Greater;
				}
				else if (ch == '=') {
					currState = Assign;
					type = lexAssgnOp;
				}
				else if (ch == '^') {
					currState = Assign;
					type = lexArithmOp;
				}
				else if (ch == '|') {
					currState = Or;
				}
				else if (ch == '#') {
					currState = Directive;
					continue;
				}
				else if (ch == -1) {
					//end of file
					continue;
				}
				else {
					Errors.push_back(ErrorMessage(line, pos));
					currState = F;
				}

				val = ch;
				break;
			}
			case KWorID: {      //Key word or identifier
				ch = file.peek();

				while((ch >= 48 && ch <= 57) || (ch >= 65 && ch <= 90) ||
							ch == 95 || (ch >= 97 && ch <= 122)) {
					file.get();
					val += ch;
					ch = file.peek();
				}
				if (isCharAllowed(ch)) {
					bool keyWord = hashTable.find(val);
					if(keyWord)
						type = lexKeyWord;
					else {
						bool already = tree.FindNode(val);
						if(!already) tree.AddNode(val);
						type = lexIdent;
					}
					currState = F;
				}
				else {
					Errors.push_back(ErrorMessage(line, pos, "Uncorrect format of Identifier!"));
					currState = ErrorLexemEnd;
                                }
				break;
			}
			case UCharOrID: {
				ch = file.peek();

				if (ch == '\'') {
					file.get();
					val += ch;
					currState = UCharEnd;
				}
				else {
					currState = KWorID;
				}
				break;
			}
			case U8CharOrID: {
				ch = file.peek();

				if (ch == '8') {
					currState = UCharOrID;
					file.get();
					val += ch;
				}
				else if (ch == '\'') {
					file.get();
					val += ch;
					currState = UCharEnd;
				}
				else currState = KWorID;
				break;
			}
			case UCharEnd: {  // State for end of UTF-8 Char
				ch = file.peek();

				while (ch != '\'' && ch != '\n') {
					file.get();
					val += ch;
					ch = file.peek();
				}
				if (ch == '\'' && val.length() > 7) {
						file.get();
						val += ch;
						Errors.push_back(ErrorMessage(line, pos, "UTF-8 Character is too long!"));
						currState = F;
				}
				else if (ch == '\'') {
                        file.get();
						val += ch;
						type = lexUChar;
						if (val.length() > 5)
							Errors.push_back(ErrorMessage(line, pos, "Warning: multi-character constant!"));
						currState = F;
				}
				else if (ch == '\n') {
						Errors.push_back(ErrorMessage(line, pos, "Expected a quotation \" ' \" to end a char!"));
						currState = F;
				}
				break;
			}
			case Char: {
				ch = file.get();

				if (ch != '\\')
					currState = CharEnd;
				else
					currState = EscapeChar;
				val += ch;
				break;
			}
			case EscapeChar: {    // State for escape sequence characters
				ch = file.get();

				if (ch == 'n' || ch == 't' || ch == 'r' || ch == '\'' || ch == '\"' || ch == 'v' ||
					ch == '?' || ch == '\\' || ch == '0' || ch == 'a' || ch == 'b' || ch == 'f') {
					currState = CharEnd;
				}
				else {
					Errors.push_back(ErrorMessage(line, pos, "Expected an escape char!"));
					currState = ErrorCharEnd;
				}
				val += ch;
				break;
			}
			case ErrorCharEnd: {  // State for error end of Char
				ch = file.peek();

				if (ch == '\'') {
					file.get();
					val += ch;
					currState = F;
				}
				else {
					while (ch != '\'' && ch != '\n') {
						file.get();
						val += ch;
						ch = file.peek();
					}
					ch = file.get();
					val += ch;
					Errors.push_back(ErrorMessage(line, pos, "Warning: multi-character constant!"));
					currState = F;
				}
				break;
			}
			case CharEnd: {  // State for end of Char
				ch = file.peek();

				if (ch == '\'') {
					file.get();
					val += ch;
					type = lexChar;
					currState = F;
				}
				else {
					while (ch != '\'' && ch != '\n') {
						file.get();
						val += ch;
						ch = file.peek();
					}
					if (ch == '\'' && val.length() > 4) {
						file.get();
						val += ch;
						Errors.push_back(ErrorMessage(line, pos, "Character is too long!"));
						currState = F;
					}
					else if (ch == '\'') {
						file.get();
						val += ch;
						type = lexChar;
						Errors.push_back(ErrorMessage(line, pos, "Warning: multi-character constant!"));
						currState = F;
					}
					else if (ch == '\n') {
						Errors.push_back(ErrorMessage(line, pos, "Expected a quotation \" ' \" to end a char!"));
						currState = F;
					}
				}
				break;
			}
			case String: {
				ch = file.get();

				while ((!(ch == '\"' &&
					val[val.length() - 1] != '\\')) && ch != '\n') {
													//check if double quotes is really end of string
													//not the escape character
					val += ch;
					ch = file.get();
				}
				if (ch == '\n') {
						Errors.push_back(ErrorMessage(line, pos, "Expected a double quotation \' \" \' to end a string!"));
						currState = F;
				}
				else {
					val += ch;
					type = lexStringConst;
					currState = F;
				}
				break;
			}
			case NumStartsWithZero: {
				ch = file.peek();

				if (isdigit(ch) && ch != '0' && ch != '8' && ch != '9') {
					ch = file.get();
					val += ch;
					currState = OctNum;
				}
				else if(isdigit(ch)) {
					if (ch == '0') {
						Errors.push_back(ErrorMessage(line, pos, "Uncorrect octal value!"));
						currState = ErrorLexemEnd;
					}
					else if (ch == '8' || ch == '9') {
						Errors.push_back(ErrorMessage(line, pos, "Expected an octal number!"));
						currState = ErrorLexemEnd;
					}
					file.get();
					val += ch;
				}
				else if (ch == '.') {
					ch = file.get();
					val += ch;
					currState = NumWithDot;
				}
				else if (ch == 'x' || ch == 'X') {
                    ch = file.get();
					val += ch;
					currState = HexNum;
				}
				else if (ch == 'b' || ch == 'B') {
                    ch = file.get();
					val += ch;
					currState = BinNum;
				}
				else if (isalpha(ch)) {
					Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
                                // ??добавить проверку следующего символа или перейти в суффиксы??
                                //
                                //==============
                                //              ===============
                                //==============               =================
                                //              ===============
                                //==============
				}
				else {
				   type = lexDecNum;
				   currState = F;
				}
				break;
			}
			case Num: {
				ch = file.peek();
				passThrough = false;

				while(isdigit(ch) || ch == '.' || ch == 'e' || ch == 'E') {
					if (isdigit(ch)) {
						file.get();
						val += ch;
						ch = file.peek();
					}
					else if (ch == '.') {
                        file.get();
						val += ch;
						currState = NumWithDot;
						passThrough = true;
						break;
					}
					else if (ch == 'e' || ch == 'E')
					{
						file.get();
						val += ch;
						currState = NumWithExp;
						passThrough = true;
						break;
					}
				}
				if(!passThrough) {
					type = lexDecNum;
					currState = NumSuf;
				}
				break;

			}
			case NumSuf: {
				ch = file.peek();

				if (ch == 'L' || ch == 'l') {
						file.get();
						val += ch;
						currState = NumSufL1;
				}
				else if (ch == 'u' || ch == 'U') {
						file.get();
						val += ch;
						currState = NumSufU1;
				}
				else if (isalpha(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
				}
				else if (!isCharAllowed(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos));
					currState = ErrorLexemEnd;
				}
				else
					currState = F;
				break;
			}
			case NumSufL1 : {
				ch = file.peek();

				if (ch == 'l' || ch == 'L') {
					file.get();
					val += ch;
					currState = NumSufL2;
				}
				else if (ch == 'u' || ch == 'U') {
					file.get();
					val += ch;
					currState = SufEndCheck;
				}
				else if (isalpha(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
				}
				else if (!isCharAllowed(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos));
					currState = ErrorLexemEnd;
				}
				else
					currState = F;
				break;
			}
			case NumSufL2 : {
				ch = file.peek();

				if (ch == 'u' || ch == 'U') {
					file.get();
					val += ch;
					currState = SufEndCheck;
				}
				else if (isalpha(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
				}
				else if (!isCharAllowed(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos));
					currState = ErrorLexemEnd;
				}
				else
					currState = F;
				break;
			}
			case NumSufU1 : {
                ch = file.peek();

				if (ch == 'l' || ch == 'L') {
					file.get();
					val += ch;
					currState = NumSufU2;
				}
				else if (isalpha(ch)) {
					type = lexError;
                	Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
				}
				else if (!isCharAllowed(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos));
					currState = ErrorLexemEnd;
				}
				else
					currState = F;
				break;
			}
			case NumSufU2: {
				ch = file.peek();

				if (ch == 'l' || ch == 'L') {
					file.get();
					val += ch;
					currState = SufEndCheck;
				}
				else if (isalpha(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
				}
				else if (!isCharAllowed(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos));
					currState = ErrorLexemEnd;
				}
				else
					currState = F;
				break;
			}
			case FloatSuf: {
				ch = file.peek();

				if (ch == 'L' || ch == 'l' || ch == 'F' || ch == 'f') {
					file.get();
					val += ch;
					currState = SufEndCheck;
				}
				else if (isalpha(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
				}
				else if (!isCharAllowed(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos));
					currState = ErrorLexemEnd;
				}
				else
					currState = F;
				break;
			}
			case SufEndCheck: {
				ch = file.peek();

				if (isalpha(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos, "Identifier can't start with number!"));
					currState = ErrorLexemEnd;
				}
				else if (!isCharAllowed(ch)) {
					type = lexError;
					Errors.push_back(ErrorMessage(line, pos));
					currState = ErrorLexemEnd;
				}
				else
					currState = F;
				break;
			}
			case NumWithDot: {
				ch = file.peek();
				passThrough = false;

				while(isdigit(ch) || ch == '.' || ch == 'e' || ch == 'E') {
					if (isdigit(ch)) {
						file.get();
						val += ch;
						ch = file.peek();
					}
					else if (ch == '.') {
						passThrough = true;
						Errors.push_back(ErrorMessage(line, pos, "Too many decimal points!"));
						file.get();
						val += ch;
						currState = ErrorLexemEnd;
						break;
					}
					else if (ch == 'e' || ch == 'E')
					{
						passThrough = true;
						if (val.length() == 1 && val[0] == '.') {
							Errors.push_back(ErrorMessage(line, pos, "Expected a mantis!"));
							currState = ErrorLexemEnd;
						}
						else {
							file.get();
							val += ch;
							currState = NumWithExp;
						}
						break;
					}
				}
				if (!passThrough) {
					type = lexNumWithDot;
					currState = FloatSuf;
				}
				break;
			}
			case NumWithExp: {
				ch = file.peek();

				if(ch == '-' || ch == '+') {
					file.get();
					val += ch;
					currState = NumWithExpSign;
				}
				else if (isdigit(ch)) {
					 file.get();
					 val += ch;
					 currState = NumWithExpMan;
				}
				else {
					Errors.push_back(ErrorMessage(line, pos, "Expected an exponent!"));
					currState = ErrorLexemEnd;
				}
				break;
			}
			case NumWithExpSign: {
				ch = file.get();

				if (isdigit(ch)) {
					file.get();
					val += ch;
					currState = NumWithExpMan;
				}
                else {
					Errors.push_back(ErrorMessage(line, pos, "Expected an exponent!"));
					currState = ErrorLexemEnd;
				}
				break;
            }
			case NumWithExpMan: {
				ch = file.peek();
				passThrough = false;

				while(isdigit(ch) || ch == '.') {
					if (isdigit(ch)) {
						file.get();
						val += ch;
						ch = file.peek();
					}
					else if (ch == '.') {
						passThrough = true;
						if (val.find(".") != std::string::npos)
							Errors.push_back(ErrorMessage(line, pos, "Too many decimal points!"));
						else
							Errors.push_back(ErrorMessage(line, pos, "Decimal point is not allowed here!"));
						file.get();
						val += ch;
						currState = ErrorLexemEnd;
						break;
					}
				}
				if (!passThrough) {
					type = lexNumWithDot;
					currState = FloatSuf;
				}
				break;
			}
			case OctNum: {
				ch = file.peek();
				passThrough = false;

				while (isdigit(ch) || ch == '.') {
					if(ch == '8' || ch == '9') {
						passThrough = true;
                        file.get();
						val += ch;
						Errors.push_back(ErrorMessage(line, pos, "Expected an octal value!"));
						currState = ErrorLexemEnd;
						break;
					}
					else if (ch == '.') {
						passThrough = true;
						Errors.push_back(ErrorMessage(line, pos, "Decimal point is not allowed here!"));
						file.get();
						val += ch;
						currState = ErrorLexemEnd;
						break;
					}
					else {
						file.get();
						val += ch;
						ch = file.peek();
					}
				}
				if (!passThrough) {
					type = lexOctNum;
					currState = NumSuf;
				}
				break;
			}
			case HexNum: {
				passThrough = false;
				ch = file.peek();

				if (!isxdigit(ch) && ch != '.' && ch != 'p' && ch != 'P') {
					passThrough = true;
					Errors.push_back(ErrorMessage(line, pos, "Expected a hex value!"));
					currState = ErrorLexemEnd;
				}

				while (isxdigit(ch) || ch == '.' || ch == 'p' || ch == 'P') {
					if (isxdigit(ch)) {
						file.get();
						val += ch;
						ch = file.peek();
					}
					else if (ch == '.') {
						passThrough = true;
						file.get();
						val += ch;
						currState = HexNumWithDot;
						break;
					}
					else if (ch == 'p' || ch == 'P') {
						passThrough = true;
						file.get();
						val += ch;
						currState = HexNumWithExp;
						break;
					}
				}
				if (!passThrough) {
					type = lexHexNum;
					currState = NumSuf;
				}
				break;
			}
			case HexNumWithDot: {
				ch = file.peek();
				passThrough = false;

				while(isxdigit(ch) || ch == '.' || ch == 'p' || ch == 'P') {
					if (isxdigit(ch)) {
						file.get();
						val += ch;
						ch = file.peek();
					}
					else if (ch == '.') {
						passThrough = true;
						Errors.push_back(ErrorMessage(line, pos, "Too many decimal points!"));
						file.get();
						val += ch;
						currState = ErrorLexemEnd;
						break;
					}
					else if (ch == 'p' || ch == 'P')
					{
						passThrough = true;
						if (val.length() == 3 && val[2] == '.') {
							Errors.push_back(ErrorMessage(line, pos, "Expected a mantis!"));
							currState = ErrorLexemEnd;
						}
						else {
							currState = HexNumWithExp;
							file.get();
							val += ch;
						}
						break;
					}
				}
				if (!passThrough) {
					type = lexHexNumWithDot;
					currState = FloatSuf;
				}
				break;
			}
			case HexNumWithExp: {
				ch = file.peek();

				if(ch == '-' || ch == '+') {
					file.get();
					val += ch;
					currState = HexNumWithExpSign;
				}
				else if ( isxdigit(ch)) {
					currState = HexNumWithExpMan;
				}
				else {
					Errors.push_back(ErrorMessage(line, pos, "Expected an exponent!"));
					currState = ErrorLexemEnd;
				}
				break;
			}
			case HexNumWithExpSign: {
				ch = file.peek();

				if (isxdigit(ch)) {
					file.get();
					val += ch;
					currState = HexNumWithExpMan;
				}
				else {
                	Errors.push_back(ErrorMessage(line, pos, "Expected an exponent!"));
					currState = ErrorLexemEnd;
                }
				break;
            }
			case HexNumWithExpMan: {
				ch = file.peek();
				passThrough = false;

				while(isxdigit(ch) || ch == '.') {
					if (isxdigit(ch)) {
						file.get();
						val += ch;
						ch = file.peek();
					}
					else if (ch == '.') {
						passThrough = true;
						if (val.find(".") != std::string::npos)
							Errors.push_back(ErrorMessage(line, pos, "Too many decimal points!"));
						else
							Errors.push_back(ErrorMessage(line, pos, "Decimal point is not allowed here!"));
						file.get();
						val += ch;
						currState = ErrorLexemEnd;
						break;
					}
				}
				if (!passThrough) {
					type = lexHexNumWithDot;
					currState = FloatSuf;
				}
				break;
			}
			case BinNum: {
				ch = file.peek();
				passThrough = false;

				while (isdigit(ch) || ch == '.') {
					if(ch != '0' && ch != '1') {
						passThrough = true;
						Errors.push_back(ErrorMessage(line, pos, "Expected a binary value!"));
						currState = ErrorLexemEnd;
						break;
					}
					else if (ch == '.') {
						passThrough = true;
						Errors.push_back(ErrorMessage(line, pos, "Decimal point is not allowed here!"));
						currState = ErrorLexemEnd;
						break;
					}
					else {
						file.get();
						val += ch;
						ch = file.peek();
					}
				}
				if (!passThrough) {
					type = lexBinNum;
					currState = NumSuf;
				}
				break;
			}
			case Dot: {
				ch = file.peek();

				if (isdigit(ch)) {
					currState = NumWithDot;
				}
				else {
					type = lexMembAcsOp;
					currState = F;
				}
				break;
			}
			case Colon: {
				ch = file.peek();

				if (ch == ':') {
					file.get();
					val += ch;
					type = lexDblColons;
				}
				else
					type = lexColons;
				currState = F;
				break;
			}
			case Plus: {
				ch = file.peek();

				if (ch == '+') {
					file.get();
					val += ch;
					type = lexIncrem;
				}
				else if (ch == '=') {
					file.get();
					val += ch;
					type = lexAssgnOp;
				}
				else
					type = lexArithmOp;
				currState = F;
			}
			case Minus: {
				ch = file.peek();

				if (ch == '-') {
					file.get();
					val += ch;
					type = lexDecrem;
				}
				else if (ch == '=') {
					file.get();
					val += ch;
					type = lexAssgnOp;
				}
				else if (ch == '>') {
					file.get();
					val += ch;
					type = lexMembAcsOp;
				}
				else
					type = lexArithmOp;
				currState = F;
				break;
			}
			case Assign: {
				ch = file.peek();

				if (ch == '=') {
					file.get();
					val += ch;
					type = lexAssgnOp;
				}
				currState = F;
				break;
			}
			case Amp: {
				ch = file.peek();

				if (ch == '&') {
					file.get();
					val += ch;
					type = lexLogicOp;
				}
				else if (ch == '=') {
					file.get();
					val += ch;
					type = lexAssgnOp;
				}
				else
					type = lexAmpersand;
				currState = F;
				break;
			}
			case Div: {
				ch = file.peek();

				if (ch == '=') {
					file.get();
					val += ch;
					type = lexAssgnOp;
					currState = F;
				}
				else if (ch == '/') {
					file.get();
					currState = LineComment;
				}
				else if (ch == '*') {
					file.get();
					pos += 2;
					currState = WideComment;
				}
				else {
					type = lexArithmOp;
					currState = F;
				}
				break;
			}
			case Or: {
				ch = file.peek();

				if (ch == '|') {
					file.get();
					val += ch;
					type = lexLogicOp;
				}
				else
					type = lexArithmOp;
				currState = F;
				break;
			}
			case LineComment: {
				do {
					ch = file.get();
				} while (ch != '\n');
				++line;
				pos = 1;
				currState = H;
				break;
			}
			case WideComment: {
				do {
					ch = file.get();
					++pos;
					if (ch == '\n') {
						++line;
						pos = 1;
					}
					else if (file.eof()) {
						Errors.push_back(ErrorMessage(line, pos, "Expected end of comment!"));
						break;
					}
				} while (ch != '*');
				currState = WideCommentEnd;
				break;
			}
			case WideCommentEnd: {
				ch = file.get();

				if (ch == '/') {
					currState = H;
					++pos;
				}
				else if (file.eof()) {
					Errors.push_back(ErrorMessage(line, pos, "Expected end of comment!"));
				}
				else {
					currState = WideComment;
					++pos;
				}
				break;
			}
			case Less: {
				ch = file.peek();

				if (ch == '=') {
					file.get();
					val += ch;
					currState = LessEq;
				}
				else if (ch == '<') {
					file.get();
					val += ch;
					currState = LeftShift;
				}
				else {
					type = lexLAngleBracket;
					currState = F;
				}
				break;
			}
			case LessEq: {
				ch = file.peek();

				if (ch == '>') {
					file.get();
					val += ch;
				}
				type = lexCompOp;
				currState = F;
				break;
			}
			case LeftShift: {
				ch = file.peek();

				if (ch == '=') {
					file.get();
					val += ch;
					type = lexAssgnOp;
				}
				else
					type = lexArithmOp;
				currState = F;
				break;
			}
			case Greater: {
				ch = file.peek();

				if (ch == '=') {
					file.get();
					val += ch;
					type = lexCompOp;
					currState = F;
				}
				else if (ch == '>') {
					file.get();
					val += ch;
					currState = RightShift;
				}
				else {
					type = lexRAngleBracket;
					currState = F;
                }
				break;
			}
			case RightShift: {
				ch = file.peek();

				if (ch == '=') {
					file.get();
					val += ch;
					type = lexCompOp;
				}
				else
					type = lexArithmOp;
				currState = F;
				break;
			}
			case Directive: {
				char prevChar;
				do {
					prevChar = ch;
					ch = file.get();
					if (ch == '\\') {
						++line;
					}
				} while (ch != '\n' && prevChar != '\\');
				++line;
				pos = 1;
				currState = H;
				break;
			}
			case F: {
				lexList.push_back(Lexem(type, val, line, pos));
				pos += val.length();
				currState = H;
				break;
			}
			case ErrorLexemEnd : {
				ch = file.peek();  //checking if next symbol is correct lexem

				if (isCharAllowed(ch)) {
					currState = F;
				}
				else {
					file.get();
					val += ch;
				}
				break;
			}
		}
	} while(!file.eof());
	return lexList;
}

void Scanner::initAuto()
{
	line = 1;
	pos = 1;
	currState = H;
}

void Scanner::initHashTable()
{
	hashTable.insert("alignas");
	hashTable.insert("alignof");
	hashTable.insert("and");
	hashTable.insert("and_eq");
	hashTable.insert("asm");
	hashTable.insert("auto");
	hashTable.insert("bitand");
	hashTable.insert("bitor");
	hashTable.insert("bool");
	hashTable.insert("break");
	hashTable.insert("case");
	hashTable.insert("catch");
	hashTable.insert("char");
	hashTable.insert("char16_t");
	hashTable.insert("char32_t");
	hashTable.insert("class");
	hashTable.insert("compl");
	hashTable.insert("const");
	hashTable.insert("constexpr");
	hashTable.insert("const_cast");
	hashTable.insert("continue");
	hashTable.insert("decltype");
	hashTable.insert("default");
	hashTable.insert("delete");
	hashTable.insert("do");
	hashTable.insert("double");
	hashTable.insert("dynamic_cast");
	hashTable.insert("else");
	hashTable.insert("enum");
	hashTable.insert("explicit");
	hashTable.insert("export");
	hashTable.insert("extern");
	hashTable.insert("false");
	hashTable.insert("float");
	hashTable.insert("for");
	hashTable.insert("friend");
	hashTable.insert("goto");
	hashTable.insert("if");
	hashTable.insert("inline");
	hashTable.insert("int");
	hashTable.insert("long");
	hashTable.insert("mutable");
	hashTable.insert("namespace");
	hashTable.insert("new");
	hashTable.insert("noexcept");
	hashTable.insert("not");
	hashTable.insert("not_eq");
	hashTable.insert("nullptr");
	hashTable.insert("operator");
	hashTable.insert("or");
	hashTable.insert("or_eq");
	hashTable.insert("private");
	hashTable.insert("protected");
	hashTable.insert("public");
	hashTable.insert("register");
	hashTable.insert("reinterpret_cast");
	hashTable.insert("return");
	hashTable.insert("short");
	hashTable.insert("signed");
	hashTable.insert("sizeof");
	hashTable.insert("static");
	hashTable.insert("static_assert");
	hashTable.insert("static_cast");
	hashTable.insert("struct");
	hashTable.insert("switch");
	hashTable.insert("template");
	hashTable.insert("this");
	hashTable.insert("thread_local");
	hashTable.insert("throw");
	hashTable.insert("true");
	hashTable.insert("try");
	hashTable.insert("typedef");
	hashTable.insert("typeid");
	hashTable.insert("typename");
	hashTable.insert("union");
	hashTable.insert("unsigned");
	hashTable.insert("using");
	hashTable.insert("virtual");
	hashTable.insert("void");
	hashTable.insert("volatile");
	hashTable.insert("wchar_t");
	hashTable.insert("while");
	hashTable.insert("xor");
	hashTable.insert("xor_eq");
}

vector<ErrorMessage> Scanner::getErrors()
{
	return Errors;
}

bool Scanner::isCharAllowed(char ch)
{
	if (ch == ' ')
		return true;
	else if (ch == ';')
		return true;
	else if (ch == '\t')
		return true;
	else if (ch == '\n')
		return true;
	else if (ch == ',')
		return true;
	else if (ch == '+')
		return true;
	else if (ch == '-')
		return true;
	else if (ch == '*')
		return true;
	else if (ch == '/')
		return true;
	else if (ch == '=')
		return true;
	else if (ch == '<')
		return true;
	else if (ch == '>')
		return true;
	else if (ch == '.')
		return true;
	else if (ch == '&')
		return true;
	else if (ch == '!')
		return true;
	else if (ch == ':')
		return true;
	else if (ch == '?')
		return true;
	else if	(ch == '~')
		return true;
	else if (ch == '%')
		return true;
	else if (ch == '^')
		return true;
	else if (ch == '|')
		return true;
	else if (ch == '(')
		return true;
	else if (ch == ')')
		return true;
	else if (ch == '[')
		return true;
	else if (ch == ']')
		return true;
	else if (ch == '{')
		return true;
	else if (ch == '}')
		return true;
	return false;
}
